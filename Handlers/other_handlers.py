import asyncio
import logging
import os
import datetime
from aiogram import Router, F, Bot, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.formatting import Text, Bold
from Handlers.db_handler import (
    read_user_statistics_from_db, update_day_data_db, read_day_rating, read_week_rating, get_yesterday, get_yesterweek,
    export_data_to_file, add_new_user, read_day_time_rating, update_today_data_db, read_day_points_rating,
    read_week_time_rating, read_week_points_rating, read_club_rating, update_bid, read_user_bids_from_db)
from Config.config_reader import admin, chat_id

from Keyboards.keyboards import make_row_keyboard, get_start_keyboard, get_cancel_keyboard, get_donate_button

# from Keyboards.inline_keyboard import get_inline_kb

router: Router = Router()

available_genders = ["Ô∏è–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]
available_categories = ["Begym", "–°–æ–≤–∫–æ–º–±–∞–Ω–∫", "–ö–∞–∑–±–µ–∫", "–≠–ª—å–±—Ä—É—Å", "–î–æ–º–†–§", "–ö–†–û–ö"]

is_delete_mileage = False


async def reset_fsm_state(user_id, state, timeout=3):
    last_message_time = state.get('last_message_time')
    if last_message_time is None:
        # First message, save the time
        state['last_message_time'] = asyncio.get_running_loop().time()
        return

    current_time = asyncio.get_running_loop().time()
    time_since_last_message = current_time - last_message_time
    if time_since_last_message > timeout:
        # User has not written a new message within 5 minutes, reset the state
        state.reset_state()
        state['last_message_time'] = current_time


class Znakomstvo(StatesGroup):
    add_name = State()
    choosing_genders = State()
    choosing_categories = State()


class Mileage_add_status(StatesGroup):
    add_mileage_km = State()
    add_mileage_time_hours = State()
    add_mileage_time_minutes = State()
    add_mileage_time_seconds = State()


class Bids(StatesGroup):
    choosing_bid_category_man = State()
    add_bid_category_man = State()
    choosing_bid_category_woman = State()
    add_bid_category_woman = State()


def convert_seconds(seconds):
    return str(datetime.timedelta(seconds=seconds))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def command_start_handler(message: Message, bot: Bot) -> None:
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                           reply_markup=get_start_keyboard(),
                           # reply_markup=get_inline_kb()
                           )


@router.message(F.chat.type == "private", F.text == "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def znakomstvo(message: Message, state: FSMContext) -> None:
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if not read_user_statistics_from_db(message.from_user.id):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n"
                             f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
                             reply_markup=get_cancel_keyboard(txt='–ò–º—è –§–∞–º–∏–ª–∏—è'))
        await state.set_state(Znakomstvo.add_name)
    else:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å", reply_markup=get_start_keyboard())


@router.message(Znakomstvo.add_name, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def name_added(message: Message, state: FSMContext):
    # if len(message.text) > 50:
    #     await message.answer(f"–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤")
    #     return
    await state.update_data(name_added=message.text)
    user_data = await state.get_data()
    await message.answer(
        text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, {user_data['name_added']}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫—Ç–æ –í—ã:",
        reply_markup=make_row_keyboard(available_genders, txt='–í—ã:'))
    await state.set_state(Znakomstvo.choosing_genders)


@router.message(Znakomstvo.choosing_genders, F.text.in_(available_genders))
async def gender_chosen(message: Message, state: FSMContext):
    await state.update_data(chosen_gender=message.text.lower())
    await message.answer(
        text="–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª—É–±:",
        reply_markup=make_row_keyboard(available_categories, txt='–í–∞—à –∫–ª—É–±:')
    )
    await state.set_state(Znakomstvo.choosing_categories)


@router.message(Znakomstvo.choosing_genders, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def gender_incorrectly(message: Message):
    await message.answer(
        text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –ø–æ–ª–∞.\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=make_row_keyboard(available_genders, txt='–í—ã:')
    )


@router.message(Znakomstvo.choosing_categories, F.text.in_(available_categories))
async def categories_chosen(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    telegram_id = message.from_user.id
    username = message.from_user.full_name
    fullname = user_data['name_added']
    gender = user_data['chosen_gender']
    category = message.text
    gender_hi = "–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫! üèÉüèª‚Äç‚ôÇÔ∏è"
    if gender == available_genders[1].lower():
        gender_hi = "–Ω–æ–≤–∞—è —É—á–∞—Å—Ç–Ω–∏—Ü–∞! üèÉüèª‚Äç‚ôÄÔ∏è"
    await message.answer(
        text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
             f"–í–∞—Å –∑–æ–≤—É—Ç: {fullname}.\n"
             f"–í—ã: {gender}.\n"
             f"–í–∞—à –∫–ª—É–±: {category}",
        reply_markup=get_start_keyboard()
    )
    await state.clear()
    add_new_user(telegram_id, username, fullname, gender, category)

    await bot.send_message(
        chat_id,
        f"–£ –Ω–∞—Å {gender_hi}\n"
        f"<b>{fullname}</b> –∏–∑ –∫–ª—É–±–∞ {category}\n"
        f"–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ!"
    )


@router.message(Znakomstvo.choosing_categories, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def category_incorrectly(message: Message):
    await message.answer(
        text="–£ –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª—É–±–∞.\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=make_row_keyboard(available_categories, txt='–í–∞—à –∫–ª—É–±:')
    )


@router.message(F.chat.type == "private", F.text == "üèÜ –°—Ç–∞–≤–∫–∞")
async def add_bid(message: Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–≤–∫–µ
    # bids = read_user_statistics_from_db(message.from_user.id)
    bids = read_user_bids_from_db(message.from_user.id)
    bids_on = False
    if not bids:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n"
                             f"–î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.",
                             reply_markup=get_start_keyboard())
    else:
        if bids[4]:
            await message.answer(f"–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É:\n"
                                 f"{bids[5]} –∫–º. –Ω–∞ –ø–∞—Ä–Ω–µ–π –∏–∑ –∫–ª—É–±–∞ {bids[4]}\n"
                                 f"{bids[7]} –∫–º. –Ω–∞ –¥–µ–≤—É—à–µ–∫ –∏–∑ –∫–ª—É–±–∞ {bids[6]}",
                                 reply_markup=get_start_keyboard())

        elif bids_on:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{bids[1]}</b>!\n"
                                 f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–∏–ª–æ–º–µ—Ç—Ä—ã –ø—Ä–æ–±–µ–≥–∞ –Ω–∞ —Ç–æ, –∫–∞–∫–æ–π –∫–ª—É–± "
                                 f"–ø–∞—Ä–Ω–µ–π –∏ –¥–µ–≤—É—à–µ–∫ –≤—ã–∏–≥—Ä–∞–µ—Ç.\n"
                                 f"–ï—Å–ª–∏ —Ç—ã —É–≥–∞–¥–∞–µ—à—å, —Ç–æ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è –∫ —Ç–≤–æ–µ–º—É –∏—Ç–æ–≥–æ–≤–æ–º—É –ø—Ä–æ–±–µ–≥—É.\n"
                                 f"–ï—Å–ª–∏ –Ω–µ—Ç, —Å—Ç–∞–≤–∫–∞ –≤—ã—á—Ç–µ—Ç—Å—è –∏–∑ —Ç–≤–æ–µ–≥–æ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞.\n"
                                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∫–ª—É–±—ã 35 –∫–º.\n"
                                 f"–ì–æ—Ç–æ–≤ —Ä–∏—Å–∫–Ω—É—Ç—å? –¢–æ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–ª—É–± –ø–∞—Ä–Ω–µ–π:",
                                 reply_markup=make_row_keyboard(available_categories, txt='–í—ã–±–µ—Ä–∏ –º—É–∂—Å–∫–æ–π –∫–ª—É–±.'))
            await state.set_state(Bids.choosing_bid_category_man)
        else:
            await message.answer(f"–ü—Ä–∏–µ–º —Å—Ç–∞–≤–æ–∫ –æ–∫–æ–Ω—á–µ–Ω.",
                                 reply_markup=get_start_keyboard())


@router.message(Bids.choosing_bid_category_man, F.chat.type == "private", F.text.in_(available_categories),
                F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def bid_man_category_chosen(message: Message, state: FSMContext):
    await state.update_data(bid_man_category=message.text)
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≥–æ—Ç–æ–≤(–∞) –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –º—É–∂—Å–∫–æ–π –∫–ª—É–±.",
        reply_markup=get_cancel_keyboard(txt="–°—Ç–∞–≤–∫–∞, –∫–º.–∫–º")
    )
    await state.set_state(Bids.add_bid_category_man)


@router.message(Bids.add_bid_category_man, F.chat.type == "private", F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def bid_man_added(message: Message, state: FSMContext):
    try:
        if float(message.text) == 0 or float(message.text) < 0 or float(message.text) > 35:
            raise ValueError()
        await state.update_data(bid_man=float(message.text))
        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∂–µ–Ω—Å–∫–∏–π –∫–ª—É–±.",
            reply_markup=make_row_keyboard(available_categories, txt='–í—ã–±–µ—Ä–∏ –∂–µ–Ω—Å–∫–∏–π –∫–ª—É–±.'))
        await state.set_state(Bids.choosing_bid_category_woman)
    except ValueError:
        await message.answer(text="–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏ —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –±–æ–ª–µ–µ 35 –∫–º.",
                             reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º.–∫–º"))


@router.message(Bids.choosing_bid_category_woman, F.chat.type == "private",
                F.text.in_(available_categories), F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def bid_woman_category_chosen(message: Message, state: FSMContext):
    await state.update_data(bid_woman_category=message.text)
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≥–æ—Ç–æ–≤(–∞) –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∂–µ–Ω—Å–∫–∏–π –∫–ª—É–±.",
        reply_markup=get_cancel_keyboard(txt="–°—Ç–∞–≤–∫–∞, –∫–º.–∫–º")
    )
    await state.set_state(Bids.add_bid_category_woman)


@router.message(Bids.add_bid_category_woman, F.chat.type == "private", F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def bid_man_added(message: Message, bot: Bot, state: FSMContext):
    try:
        user_data = await state.get_data()
        if float(message.text) == 0 or float(message.text) < 0 or float(message.text) > 35 - user_data['bid_man']:
            raise ValueError()
        await state.update_data(bid_woman=float(message.text))
        user_data = await state.get_data()
        telegram_id = message.from_user.id
        bid_man_category = user_data['bid_man_category']
        bid_man = user_data['bid_man']
        bid_woman_category = user_data['bid_woman_category']
        bid_woman = user_data['bid_woman']
        await message.answer(
            text=f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É:\n"
                 f"{bid_man} –∫–º. –Ω–∞ –ø–∞—Ä–Ω–µ–π –∏–∑ –∫–ª—É–±–∞ {bid_man_category}\n"
                 f"{bid_woman} –∫–º. –Ω–∞ –¥–µ–≤—É—à–µ–∫ –∏–∑ –∫–ª—É–±–∞ {bid_woman_category}\n"
                 f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!",
            reply_markup=get_start_keyboard())
        await state.clear()
        update_bid(telegram_id, bid_man_category, bid_man, bid_woman_category, bid_woman)
        await bot.send_message(
            chat_id,
            f"<b>{message.from_user.full_name}</b> —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É!\n"
        )
    except ValueError:
        await message.answer(text="–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏ —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –±–æ–ª–µ–µ 35 –∫–º.",
                             reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º.–∫–º"))


@router.message(Bids.choosing_bid_category_man, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(Bids.choosing_bid_category_woman, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def bid_category_incorrectly(message: Message):
    await message.answer(
        text="–£ –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª—É–±–∞.\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=make_row_keyboard(available_categories, txt='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:')
    )


@router.message(F.text == "üìà –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞")
@router.message(F.text == "üìâ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞")
@router.message(F.chat.type == "private", Command("add"))
async def command_add(message: Message, state: FSMContext) -> None:
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if not read_user_statistics_from_db(message.from_user.id):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n"
                             f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n",
                             reply_markup=get_start_keyboard()
                             )
        await state.clear()
    else:
        global is_delete_mileage
        if message.text == "üìâ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞":
            is_delete_mileage = True
        else:
            is_delete_mileage = False
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –∫–º",
                             reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –∫–º"),
                             )
        await state.set_state(Mileage_add_status.add_mileage_km)


@router.message(Mileage_add_status.add_mileage_km, F.chat.type == "private", F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def mileage_km_added(message: Message, state: FSMContext):
    try:
        if float(message.text) == 0 or float(message.text) < 0:
            raise ValueError()
        await state.update_data(mileage_km=float(message.text))
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –ø—Ä–æ–±–µ–∂–∫–∏:",
            reply_markup=get_cancel_keyboard(txt="–ß–∞—Å—ã –ø—Ä–æ–±–µ–∂–∫–∏")
        )
        await state.set_state(Mileage_add_status.add_mileage_time_hours)

    except ValueError:
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥: –∫–º.–∫–º",
                             reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º.–∫–º"))


@router.message(Mileage_add_status.add_mileage_time_hours, F.chat.type == "private", F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def mileage_hour_added(message: Message, state: FSMContext):
    try:
        if int(message.text) > 24 or int(message.text) < 0:
            raise ValueError()
        await state.update_data(mileage_hour=int(message.text))
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –ø—Ä–æ–±–µ–∂–∫–∏:",
            reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –ø—Ä–æ–±–µ–∂–∫–∏")
        )
        await state.set_state(Mileage_add_status.add_mileage_time_minutes)

    except ValueError:
        await message.answer(text="–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
                             reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –ø—Ä–æ–±–µ–∂–∫–∏"))


@router.message(Mileage_add_status.add_mileage_time_minutes, F.chat.type == "private", F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def mileage_minutes_added(message: Message, state: FSMContext):
    try:
        if int(message.text) > 60:
            raise ValueError()
        await state.update_data(mileage_minutes=int(message.text))
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–±–µ–∂–∫–∏:",
            reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–±–µ–∂–∫–∏")
        )
        await state.set_state(Mileage_add_status.add_mileage_time_seconds)

    except ValueError:
        await message.answer(text="–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
                             reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–±–µ–∂–∫–∏"))


# –í–≤–æ–¥ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–±–µ–∂–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏ –≤ –ë–î –∏ –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–∫—É –∏ –≥—Ä—É–ø–ø—É
@router.message(Mileage_add_status.add_mileage_time_seconds, F.chat.type == "private", F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def mileage_seconds_added(message: Message, bot: Bot, state: FSMContext):
    try:
        if int(message.text) > 60:
            raise ValueError()
        await state.update_data(mileage_seconds=int(message.text))
        user_mileage_data = await state.get_data()
        mileage_km = user_mileage_data['mileage_km']
        mileage_hour = user_mileage_data['mileage_hour']
        mileage_minutes = user_mileage_data['mileage_minutes']
        mileage_seconds = user_mileage_data['mileage_seconds']
        full_time_seconds = int(mileage_hour) * 3600 + int(mileage_minutes) * 60 + int(mileage_seconds)
        if ((full_time_seconds / 60) / mileage_km) < 2:
            await message.answer(f"–£ –Ω–∞—Å –Ω–æ–≤—ã–π –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥! –ò–ª–∏ –Ω–µ—Ç?\n"
                                 f"–¢–µ–º–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ 2 –º–∏–Ω./–∫–º.")
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –∫–º",
                                 reply_markup=get_cancel_keyboard(txt="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –∫–º"),
                                 )
            await state.set_state(Mileage_add_status.add_mileage_km)
            return
        telegram_id = message.from_user.id

        global is_delete_mileage

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
        if not is_delete_mileage:
            new_mileage_points = update_today_data_db(telegram_id, mileage_km, full_time_seconds)
            day_mileage, day_mileage_time_seconds, day_mileage_points = update_day_data_db(telegram_id, mileage_km,
                                                                                           full_time_seconds,
                                                                                           new_mileage_points)
            new_mileage_time = convert_seconds(full_time_seconds)
            day_mileage_time = convert_seconds(day_mileage_time_seconds)
            await bot.send_message(telegram_id,
                                   f"–ù–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω:\n"
                                   f"<b>{round(mileage_km, 2)}</b> –∫–º. –∑–∞ <b>{new_mileage_time}</b>. "
                                   f"–ë–∞–ª–ª—ã: <b>{round(new_mileage_points, 2)}</b>\n"
                                   f"–ò—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                                   f"<b>{round(day_mileage, 2)}</b> –∫–º. –∑–∞ <b>{day_mileage_time}</b>. "
                                   f"–ë–∞–ª–ª—ã: <b>{round(day_mileage_points, 2)}</b>",
                                   reply_markup=get_start_keyboard()
                                   )
            await state.clear()
            await bot.send_message(
                chat_id,
                f"<b>{message.from_user.full_name}</b> –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–±–µ–≥:\n"
                f"{round(mileage_km, 2)} –∫–º. –∑–∞ {new_mileage_time}. –ë–∞–ª–ª—ã: {round(new_mileage_points, 2)}\n"
            )
        # —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞
        else:
            new_mileage_points = update_today_data_db(telegram_id, -mileage_km, -full_time_seconds)
            day_mileage, day_mileage_time_seconds, day_mileage_points = update_day_data_db(telegram_id, -mileage_km,
                                                                                           -full_time_seconds,
                                                                                           new_mileage_points)
            new_mileage_time = convert_seconds(full_time_seconds)
            day_mileage_time = convert_seconds(day_mileage_time_seconds)
            await bot.send_message(telegram_id,
                                   f"–£–¥–∞–ª—ë–Ω –ø—Ä–æ–±–µ–≥:\n"
                                   f"<b>{round(mileage_km, 2)}</b> –∫–º. –∑–∞ <b>{new_mileage_time}</b>. "
                                   f"–ë–∞–ª–ª—ã: <b>{round(new_mileage_points, 2)}</b>\n"
                                   f"–ò—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                                   f"<b>{round(day_mileage, 2)}</b> –∫–º. –∑–∞ <b>{day_mileage_time}</b>. "
                                   f"–ë–∞–ª–ª—ã: <b>{round(day_mileage_points, 2)}</b>",
                                   reply_markup=get_start_keyboard()
                                   )
            await state.clear()
            await bot.send_message(
                chat_id,
                f"<b>{message.from_user.full_name}</b> —É–¥–∞–ª–∏–ª –ø—Ä–æ–±–µ–≥:\n"
                f"{round(mileage_km, 2)} –∫–º. –∑–∞ {new_mileage_time}. –ë–∞–ª–ª—ã: {round(new_mileage_points, 2)}\n"
            )

    except ValueError:
        await message.answer(text="–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
                             reply_markup=get_cancel_keyboard())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞
@router.message(F.chat.type == "private", F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_button(message: Message, state: FSMContext):
    await message.answer(
        text=f"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_start_keyboard()
        # reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ /–¥
# @router.message(F.chat.type == "private", Command("–¥"))
# async def cmd_add_statistics(message: Message, bot: Bot, command: CommandObject):
#     telegram_id = message.from_user.id
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–±–µ–≥–∞
#     try:
#         new_mileage = float(command.args.split()[0])
#         new_mileage_time = command.args.split()[1]
#         print(f'–í—Ä–µ–º—è –ø—Ä–æ–±–µ–≥–∞: {new_mileage_time}')
#         # –ø—Ä–æ–±–µ–≥ –∏ –≤—Ä–µ–º—è —á–∏—Å–ª–æ?
#     except ValueError:
#         await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –∏ –≤—Ä–µ–º—è —á–∏—Å–ª–æ–º")
#         return
#     # –ø—Ä–æ–±–µ–≥ –∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã?
#     except TypeError:
#         await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –∏ –≤—Ä–µ–º—è")
#         return
#     except AttributeError:
#         await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –∏ –≤—Ä–µ–º—è")
#         return
#     except IndexError:
#         await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –∏ –≤—Ä–µ–º—è")
#         return
#         # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
#     if not read_user_statistics_from_db(message.from_user.id):
#         await message.reply(f"–î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: {botname}\n")
#         return
#     # –Ω–µ—Ä–µ–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–±–µ–≥
#     elif len(command.args.split()) > 2:
#         await message.reply("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
#         return
#     elif len(new_mileage_time) != 8:
#         await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú:–°–°")
#         return
#     elif new_mileage == 0:
#         await message.reply("–ü—Ä–æ–±–µ–≥ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
#         return
#     elif new_mileage > 300:
#         await message.reply("–û–±–º–∞–Ω—â–∏–∫!")
#         return
#
#     else:
#         # –ø–µ—Ä–µ–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
#         new_mileage_time_seconds = int(new_mileage_time[:2]) * 3600 + int(new_mileage_time[3:5]) * 60 + int(
#             new_mileage_time[6:])
#         print(f'–í—Ä–µ–º—è –ø—Ä–æ–±–µ–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: {new_mileage_time_seconds}')
#         print(f'–¢–µ–º–ø: {(new_mileage_time_seconds / 60) / new_mileage}')
#         if ((new_mileage_time_seconds / 60) / new_mileage) < 2:
#             await message.reply(f"–£ –Ω–∞—Å –Ω–æ–≤—ã–π –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥! –ò–ª–∏ –Ω–µ—Ç?\n"
#                                 f"–¢–µ–º–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ 2 –º–∏–Ω./–∫–º.")
#             return
#         new_mileage_points = update_today_data_db(telegram_id, new_mileage, new_mileage_time_seconds)
#         day_mileage, day_mileage_time_seconds, day_mileage_points = update_day_data_db(telegram_id, new_mileage,
#                                                                                        new_mileage_time_seconds,
#                                                                                        new_mileage_points)
#         day_mileage_time = convert_seconds(day_mileage_time_seconds)
#
#         await message.reply(
#             f"–ù–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω:\n"
#             f"{round(new_mileage, 2)} –∫–º. –∑–∞ {new_mileage_time}. –ë–∞–ª–ª—ã: {round(new_mileage_points, 2)}\n"
#             f"–ò—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
#             f"{round(day_mileage, 2)} –∫–º. –∑–∞ {day_mileage_time}. –ë–∞–ª–ª—ã: {round(day_mileage_points, 2)}"
#         )
#         await bot.send_message(
#             chat_id,
#             f"{message.from_user.full_name} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–±–µ–≥:\n"
#             f"{round(new_mileage, 2)} –∫–º. –∑–∞ {new_mileage_time}. –ë–∞–ª–ª—ã: {round(new_mileage_points, 2)}")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–º–æ—â—å
@router.message(F.text == "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
@router.message(F.chat.type == "private", Command("help"))
async def cmd_help(message: Message, bot: Bot):
    donate_button = InlineKeyboardButton(text="üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="https://pay.cloudtips.ru/p/cbd68797")
    message_button = InlineKeyboardButton(text="üÜò –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", url="https://t.me/AVSolovyov")
    row = [donate_button]
    rows = [[donate_button], [message_button]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await bot.send_message(message.from_user.id,
                           f"–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç? –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å",
                           reply_markup=markup
                           # reply_markup=get_donate_button()
                           )


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /—Å—Ç–∞—Ç
@router.message(F.text == "üìù –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@router.message(F.chat.type == "private", Command("statistics"))
async def cmd_user_statistics(message: Message, bot: Bot):
    telegram_id = message.from_user.id
    user_statistics = read_user_statistics_from_db(telegram_id)
    if user_statistics:
        username, fullname, gender, category, day_mileage, day_mileage_time_seconds, day_mileage_points, week_mileage, \
            week_mileage_time_seconds, week_mileage_points, month_mileage, month_mileage_time_seconds, \
            month_mileage_points, total_mileage, total_mileage_time_seconds, total_mileage_points = user_statistics

        day_mileage_time = convert_seconds(user_statistics[5])
        week_mileage_time = convert_seconds(user_statistics[8])
        # month_mileage_time = convert_seconds(user_statistics[11])
        total_mileage_time = convert_seconds(user_statistics[14])

        await bot.send_message(
            telegram_id,
            f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–≥–∞ –∑–∞ {datetime.datetime.now().strftime('%d.%m.%Y')}:\n"
            f"\n"
            f"–î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–±–µ–≥: <b>{round(day_mileage, 2)}</b> –∫–º. –∑–∞ <b>{day_mileage_time}</b>, "
            f"<b>{round(day_mileage_points, 2)}</b> –±–∞–ª–ª–æ–≤\n"
            f"–ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥: <b>{round(week_mileage, 2)}</b> –∫–º. –∑–∞ <b>{week_mileage_time}</b>, "
            f"<b>{round(week_mileage_points, 2)}</b> –±–∞–ª–ª–æ–≤\n"
            # f"–ú–µ—Å—è—á–Ω—ã–π –ø—Ä–æ–±–µ–≥: <b>{round(month_mileage, 2)}</b> –∫–º. –∑–∞ <b>{month_mileage_time}</b>, "
            # f"<b>{round(month_mileage_points, 2)}</b> –±–∞–ª–ª–æ–≤\n"
            f"–û–±—â–∏–π –ø—Ä–æ–±–µ–≥: <b>{round(total_mileage, 2)}</b> –∫–º. –∑–∞ <b>{total_mileage_time}</b>, "
            f"<b>{round(total_mileage_points, 2)}</b> –±–∞–ª–ª–æ–≤",
            reply_markup=get_start_keyboard()
        )
    else:
        await bot.send_message(
            telegram_id,
            f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=get_start_keyboard()
        )


async def show_club_mileage_rating(bot: Bot):
    '''
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞ –∑–∞ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏.
    –†–µ–π—Ç–∏–Ω–≥ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –ú –∏ –ñ.
    –°—É–º–º–∏—Ä—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–≥ —É –≤—Å–µ—Ö —á–µ–ª–æ–≤–µ–∫ –≤ –∫–ª—É–±–µ.
    –ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–ª—É–±–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–ª-–º –≤ –ª—é–±–æ–º –∫–ª—É–±–µ.
    :param bot:
    :return:
    '''
    yesterday = get_yesterday()
    try:
        man_rating, woman_rating = read_club_rating()
        rating_man = ""
        for (index, i) in enumerate(man_rating):
            float_club_rating = round(float(str(man_rating[index][1]).replace(',', '.')), 2)
            rating_man += f"{index + 1}. {man_rating[index][0]} - {float_club_rating} –∫–º.\n"
        text_answer_man = f"{rating_man}"

        rating_woman = ""
        for (index, i) in enumerate(woman_rating):
            float_club_rating = round(float(str(woman_rating[index][1]).replace(',', '.')), 2)
            rating_woman += f"{index + 1}. {woman_rating[index][0]} - {float_club_rating} –∫–º.\n"
        text_answer_woman = f"{rating_woman}"
    except IndexError:
        await bot.send_message(chat_id, f'–ù–µ—Ç –ø—Ä–æ–±–µ–≥–∞ –∑–∞ {yesterday}')
    await bot.send_message(
        chat_id,
        f"#–ò—Ç–æ–≥_–Ω–∞ {yesterday}\n"
        f"#–†–µ–π—Ç–∏–Ω–≥_–ø–∞—Ä–Ω–∏:"
        f"\n"
        f"{text_answer_man}"
    )
    await bot.send_message(
        chat_id,
        f"#–ò—Ç–æ–≥_–Ω–∞ {yesterday}\n"
        f"#–†–µ–π—Ç–∏–Ω–≥_–¥–µ–≤—É—à–∫–∏:"
        f"\n"
        f"{text_answer_woman}"
    )


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –æ–±—â–∏–π —á–∞—Ç
async def show_day_mileage_rating(bot: Bot):
    try:
        day_rating = read_day_rating()
        summ_mileage = 0
        winners = ""
        loosers = ""
        delimiter = ""
        yesterday = get_yesterday()
        for (index, i) in enumerate(day_rating):
            float_day_rating = round(float(str(day_rating[index][3]).replace(',', '.')), 2)
            summ_mileage += float_day_rating
            if index <= 4:
                winners += f"{index + 1}. {day_rating[index][2]}. {day_rating[index][1]} - {float_day_rating} –∫–º.\n"
            elif index >= len(day_rating) - 3:
                delimiter = f"...\n"
                loosers += f"{index + 1}. {day_rating[index][2]}. {day_rating[index][1]} - {float_day_rating} –∫–º.\n"
        text_answer = f"{winners}{delimiter}{loosers}"
    except IndexError:
        await bot.send_message(chat_id, f'–ù–µ—Ç –ø—Ä–æ–±–µ–≥–∞ –∑–∞ {yesterday}')
    await bot.send_message(
        chat_id,
        f"#–ò—Ç–æ–≥_–¥–Ω—è {yesterday}\n"
        f"#–û–±—â–∏–π_–ø—Ä–æ–±–µ–≥: {round(summ_mileage, 2)}–∫–º.\n"
        f"\n"
        f"{text_answer}"
    )


async def show_day_time_rating(bot: Bot):
    try:
        day_rating = read_day_time_rating()
        summ_mileage = 0
        winners = ""
        loosers = ""
        delimiter = ""
        yesterday = get_yesterday()

        for (index, i) in enumerate(day_rating):
            day_time_rating_seconds = day_rating[index][2]
            summ_mileage += day_time_rating_seconds
            if index <= 4:
                winners += f"{index + 1}. {day_rating[index][1]} - {convert_seconds(day_time_rating_seconds)}\n"
            elif index >= len(day_rating) - 3:
                delimiter = f"...\n"
                loosers += f"{index + 1}. {day_rating[index][1]} - {convert_seconds(day_time_rating_seconds)}\n"

        text_answer = f"{winners}" \
                      f"{delimiter}" \
                      f"{loosers}"
    except IndexError:
        await bot.send_message(chat_id, f'–ù–µ—Ç –ø—Ä–æ–±–µ–≥–∞ –∑–∞ {yesterday}')

    await bot.send_message(
        chat_id,
        f"#–ò—Ç–æ–≥_–¥–Ω—è {yesterday}\n"
        f"#–ö–æ–º–∞–Ω–¥–Ω–æ–µ_–≤—Ä–µ–º—è: {convert_seconds(summ_mileage)}\n"
        f"\n"
        f"{text_answer}"
    )


async def show_day_points_rating(bot: Bot):
    try:
        day_rating = read_day_points_rating()
        summ_mileage = 0
        winners = ""
        loosers = ""
        delimiter = ""
        yesterday = get_yesterday()

        for (index, i) in enumerate(day_rating):
            float_day_rating = round(float(str(day_rating[index][2]).replace(',', '.')), 2)
            summ_mileage += float_day_rating
            if index <= 4:
                winners += f"{index + 1}. {day_rating[index][1]} - {float_day_rating}\n"
            elif index >= len(day_rating) - 3:
                delimiter = f"...\n"
                loosers += f"{index + 1}. {day_rating[index][1]} - {float_day_rating}\n"

        text_answer = f"{winners}" \
                      f"{delimiter}" \
                      f"{loosers}"
    except IndexError:
        await bot.send_message(chat_id, f'–ù–µ—Ç –ø—Ä–æ–±–µ–≥–∞ –∑–∞ {yesterday}')

    await bot.send_message(
        chat_id,
        f"#–ò—Ç–æ–≥_–¥–Ω—è {yesterday}\n"
        f"#–ö–æ–º–∞–Ω–¥–Ω—ã–µ_–±–∞–ª–ª—ã: {round(summ_mileage, 2)}\n"
        f"\n"
        f"{text_answer}"
    )


async def show_week_mileage_rating(bot: Bot):
    try:
        week_rating = read_week_rating()
        text_answer = ""
        summ_mileage = 0
        winners = ""
        loosers = ""
        delimiter = ""
        yesterweek = get_yesterweek()
        user_sum = len(week_rating)

        for (index, i) in enumerate(week_rating):
            float_week_rating = round(float(str(week_rating[index][3]).replace(',', '.')), 2)
            summ_mileage += float_week_rating
            if index <= 4:
                winners += f"{index + 1}.{week_rating[index][2]}. {week_rating[index][1]} - {float_week_rating} –∫–º.\n"
            elif index >= user_sum - 3:
                delimiter = f"...\n"
                loosers += f"{index + 1}.{week_rating[index][2]}. {week_rating[index][1]} - {float_week_rating} –∫–º.\n"
        text_answer = f"{winners}" \
                      f"{delimiter}" \
                      f"{loosers}"
    except IndexError:
        text_answer = f'–ù–µ—Ç –ø—Ä–æ–±–µ–≥–∞ –∑–∞ {yesterweek} –Ω–µ–¥–µ–ª—é'

    await bot.send_message(
        chat_id,
        f"#–†–µ–π—Ç–∏–Ω–≥_–Ω–µ–¥–µ–ª–∏ {yesterweek}\n"
        f"#–ö–æ–º–∞–Ω–¥–Ω—ã–π_–ø—Ä–æ–±–µ–≥: {round(summ_mileage, 2)}–∫–º.\n"
        f"\n"
        f"{text_answer}"
    )


async def show_week_time_rating(bot: Bot):
    try:
        week_rating = read_week_time_rating()
        summ_mileage = 0
        winners = ""
        loosers = ""
        delimiter = ""
        yesterweek = get_yesterweek()

        for (index, i) in enumerate(week_rating):
            week_rating_seconds = week_rating[index][2]
            summ_mileage += week_rating_seconds
            if index <= 4:
                winners += f"{index + 1}. {week_rating[index][1]} - {convert_seconds(week_rating_seconds)}\n"
            elif index >= len(week_rating) - 3:
                delimiter = f"...\n"
                loosers += f"{index + 1}. {week_rating[index][1]} - {convert_seconds(week_rating_seconds)}\n"

        text_answer = f"{winners}" \
                      f"{delimiter}" \
                      f"{loosers}"
    except IndexError:
        text_answer = f'–ù–µ—Ç –ø—Ä–æ–±–µ–≥–∞ –∑–∞ {yesterweek} –Ω–µ–¥–µ–ª—é'

    await bot.send_message(
        chat_id,
        f"#–†–µ–π—Ç–∏–Ω–≥_–Ω–µ–¥–µ–ª–∏ {yesterweek}\n"
        f"#–ö–æ–º–∞–Ω–¥–Ω–æ–µ_–≤—Ä–µ–º—è: {convert_seconds(summ_mileage)}\n"
        f"\n"
        f"{text_answer}"
    )


async def show_week_points_rating(bot: Bot):
    try:
        week_rating = read_week_points_rating()
        summ_mileage = 0
        winners = ""
        loosers = ""
        delimiter = ""
        yesterweek = get_yesterweek()

        for (index, i) in enumerate(week_rating):
            float_week_rating = round(float(str(week_rating[index][2]).replace(',', '.')), 2)
            summ_mileage += float_week_rating
            if index <= 4:
                winners += f"{index + 1}. {week_rating[index][1]} - {float_week_rating}\n"
            elif index >= len(week_rating) - 3:
                delimiter = f"...\n"
                loosers += f"{index + 1}. {week_rating[index][1]} - {float_week_rating}\n"

        text_answer = f"{winners}" \
                      f"{delimiter}" \
                      f"{loosers}"
    except IndexError:
        text_answer = f'–ù–µ—Ç –ø—Ä–æ–±–µ–≥–∞ –∑–∞ {yesterweek} –Ω–µ–¥–µ–ª—é'

    await bot.send_message(
        chat_id,
        f"#–†–µ–π—Ç–∏–Ω–≥_–Ω–µ–¥–µ–ª–∏ {yesterweek}\n"
        f"#–ö–æ–º–∞–Ω–¥–Ω—ã–µ_–±–∞–ª–ª—ã: {round(summ_mileage, 2)}\n"
        f"\n"
        f"{text_answer}"
    )


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±–æ—Ç–æ–º
async def show_day_rating(bot: Bot):
    await show_day_mileage_rating(bot)
    # await show_day_time_rating(bot)
    # await show_day_points_rating(bot)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /day
@router.message(F.chat.type == "private", Command("day"))
async def cmd_day_rating(message: Message, bot: Bot):
    if message.from_user.id in admin:
        await show_day_mileage_rating(bot)
        await show_club_mileage_rating(bot)
        # await show_day_time_rating(bot)
        # await show_day_points_rating(bot)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±–æ—Ç–æ–º
async def show_week_rating(bot: Bot):
    await show_week_mileage_rating(bot)
    # await show_week_time_rating(bot)
    # await show_week_points_rating(bot)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /week
@router.message(F.chat.type == "private", Command("week"))
async def cmd_week_rating(message: Message, bot: Bot):
    if message.from_user.id in admin:
        await show_week_mileage_rating(bot)
        # await show_week_time_rating(bot)
        # await show_week_points_rating(bot)


@router.message(F.chat.type == "private", Command("—Ñ–∞–π–ª"))
async def cmd_export_data_to_file(message: types.Document, bot: Bot):
    if message.from_user.id in admin:
        filename = export_data_to_file()

        file_to_send = FSInputFile(filename)

        if os.path.exists(filename):
            await bot.send_document(message.from_user.id, file_to_send, reply_markup=get_start_keyboard())
            os.remove(filename)
        else:
            await bot.send_message(message.from_user.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.",
                                   reply_markup=get_start_keyboard())
    else:
        await message.answer(f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞!", reply_markup=get_start_keyboard())


@router.message(F.new_chat_members)
async def chat_new_user_added(message: Message):
    bot_button = InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ", url="https://t.me/SportStatistics_bot")
    row = [bot_button]
    rows = [row]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    for user in message.new_chat_members:
        content = Text(
            "–ü—Ä–∏–≤–µ—Ç, ", Bold(user.full_name), "! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è"
        )
        await message.reply(
            **content.as_kwargs(),
            reply_markup=markup,
        )
